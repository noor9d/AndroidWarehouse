// sun dependency
implementation 'com.sun.mail:android-mail:1.6.7'

// add to build.gradle(app)
android {
...
packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
            excludes += '/META-INF/{NOTICE.md,LICENSE.md}'
        }
    }
...
}

// email sending function
fun sendEmailToUserCode(to: String, review: String) {
        Log.d("kaka", "sendEmailToUserCode: called!")
        try {
            val deviceName = Build.MANUFACTURER
            val release = Build.VERSION.RELEASE
            val sdkVersion = Build.VERSION.SDK_INT

            val username = "donotreply-secureapps@mobipixels.com"
            val password = "Secure#1234"

            val props = Properties()
            props["mail.smtp.starttls.enable"] = "true"
            props["mail.smtp.host"] = "smtp.ipage.com"
            props["mail.smtp.socketFactory.port"] = "587"
            props["mail.smtp.socketFactory.class"] = "javax.net.ssl.SSLSocketFactory"
            props["mail.smtp.auth"] = "true"
            props["mail.smtp.port"] = "587"

            val session = Session.getDefaultInstance(props,
                object : Authenticator() {
                    override fun getPasswordAuthentication(): PasswordAuthentication {
                        return PasswordAuthentication(username, password)
                    }
                })

            // Create a default MimeMessage object.
            val message: Message = MimeMessage(session)

            // Set From: header field of the header.
            message.setFrom(InternetAddress(username))

            // Set To: header field of the header.
            message.setRecipients(
                Message.RecipientType.TO,
                InternetAddress.parse(to)
            )

            // Set Subject: header field
            message.subject = "Digital Compass Review"

            // Create the message part
            val messageBodyPart: BodyPart = MimeBodyPart()

            // Now set the actual message
            messageBodyPart.setText(
                "A new review for Digital Compass!"
            )

            // Create a multipart message
            val multipart: Multipart = MimeMultipart()
            // Set text message part
            multipart.addBodyPart(messageBodyPart)
            // Part two is attachment

            // second attachment
            val messageBodyPart2: BodyPart = MimeBodyPart()
            messageBodyPart2.setText(
                "\nReview: $review\nDevice: $deviceName\nAndroid Version: Android SDK: $sdkVersion ($release)"
            )
            multipart.addBodyPart(messageBodyPart2)

            // Send the complete message parts
            message.setContent(multipart)
            // Send message
            Transport.send(message)
            Log.d("kaka", "sendEmail: Email sent successfully!")
        } catch (e: MessagingException) {
            e.printStackTrace()
        }
    }
